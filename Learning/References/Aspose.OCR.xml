<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.OCR</name>
  </assembly>
  <members>
    <member name="T:Aspose.OCR.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.OCR.License.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.OCR.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder that contains the Aspose component assembly.</p>
        <p>3. The folder that contains the client's calling assembly.</p>
        <p>4. The folder that contains the entry (startup) assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
        <p>
          <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
        <p>1. Explicit path.</p>
        <p>2. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code><param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param></example>
    </member>
    <member name="M:Aspose.OCR.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
      </example>
    </member>
    <member name="T:Aspose.OCR.Filters.NamespaceDoc">
      <summary>
        <c>Aspose.OCR.Filter</c> namespace contains classes related to different image filters that can enhance recognition result.
            </summary>
    </member>
    <member name="T:Aspose.OCR.NamespaceDoc">
      <summary>
        <c>Aspose.OCR</c> namespace provides classes that allow to run and configure optical character recognition tasks.
            </summary>
    </member>
    <member name="T:Aspose.OCR.Filter">
      <summary>
            This class represents an abstract image correction algoritm.
            </summary>
    </member>
    <member name="T:Aspose.OCR.IRecognitionBlock">
      <summary>
            This interface represents a block.
            <para>
            Block is a rectangular region that may contain text, picture or any other data.
            OCR Engine will recognize whole image and will try to find text blocks by itself, if blocks are not specified by user.
            </para></summary>
      <example>
        <code>
            OcrEngine ocr = new OcrEngine();
            ocr.Image = ImageStream.FromFile(@"image.tiff");
            ocr.Languages.AddLanguage(Language.Load("english"));
            
            IRecognitionBlock pictureBlock = RecognitionBlock.CreatePictureBlock(0, 0, 100, 200);
            ocr.AddRecognitionBlock(pictureBlock);
            IRecognitionBlock textBlock = RecognitionBlock.CreateTextBlock(110, 210, 100, 100);
            ocr.AddRecognitionBlock(textBlock);
            
            if (ocr.Process())
            {
                Console.WriteLine(textBlock.RecognitionData.Text);
            }
            </code>
      </example>
    </member>
    <member name="P:Aspose.OCR.IRecognitionBlock.BlockId">
      <summary>
            Returns the block's ID. Each block has unique ID.
            Sets when the block is created.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognitionBlock.Rectangle">
      <summary>
            Returns the rectangle that defines recognition block inside specified image
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognitionBlock.ToRecognize">
      <summary>
            Shows if block needs to be processed by OCR Engine
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognitionBlock.RecognitionData">
      <summary>
            Gets the recognition data.
            </summary>
      <value>
            The recognition data.
            </value>
    </member>
    <member name="T:Aspose.OCR.CorrectionFilters">
      <summary>
            Represents filtersOld for denoising of image before recognition.
            </summary>
      <example>
        <code>
            [C#]
            OcrEngine ocr = new OcrEngine();
            CorrectionFiltersOld filtersOld = new CorrectionFiltersOld();
            filtersOld.Add(new MedianFilter());
            filtersOld.Add(new GaussBlurFilterOld(5, 1.4f));
            ocr.ConfigOld.CorrectionFiltersOld = filtersOld;
            </code>
      </example>
      <example>
        <code>
            [C#]
            OcrEngine ocr = new OcrEngine();
            ocr.ConfigOld.CorrectionFiltersOld.Add(new GaussBlurFilterOld());
            </code>
      </example>
    </member>
    <member name="M:Aspose.OCR.CorrectionFilters.Add(Aspose.OCR.Filter)">
      <summary>
            Add new <see cref="T:Aspose.OCR.ObsoleteFilter" /> object.
            </summary>
      <param name="value">Filter item.</param>
    </member>
    <member name="M:Aspose.OCR.CorrectionFilters.Clear">
      <summary>
            Clear current Filters collection.
            </summary>
    </member>
    <member name="M:Aspose.OCR.CorrectionFilters.Contains(Aspose.OCR.Filter)">
      <summary>
            Checks if item is in collection.
            </summary>
      <param name="item">Filter item.</param>
      <returns>True is collection contains element.</returns>
    </member>
    <member name="M:Aspose.OCR.CorrectionFilters.CopyTo(Aspose.OCR.Filter[],System.Int32)">
      <summary>
            Copies collection to one-dimensional array.
            </summary>
      <param name="array">Destination array.</param>
      <param name="arrayIndex">Index to copy array from.</param>
    </member>
    <member name="M:Aspose.OCR.CorrectionFilters.Remove(Aspose.OCR.Filter)">
      <summary>
            Removes element from collection.
            </summary>
      <param name="item">Filter item to remove</param>
      <returns>True if object was removed.</returns>
    </member>
    <member name="M:Aspose.OCR.CorrectionFilters.IndexOf(Aspose.OCR.Filter)">
      <summary>
            Find the index of an Filter item.
            </summary>
      <param name="item">Filter item.</param>
      <returns>The index of value if found in the list; otherwise, -1.</returns>
    </member>
    <member name="M:Aspose.OCR.CorrectionFilters.Insert(System.Int32,Aspose.OCR.Filter)">
      <summary>
            Insert an Filter item to the collection at the specified index.
            </summary>
      <param name="index">Index to insert new Filter.</param>
      <param name="item">Filter item.</param>
    </member>
    <member name="M:Aspose.OCR.CorrectionFilters.RemoveAt(System.Int32)">
      <summary>
            Remove filterOld at specified index.
            </summary>
      <param name="index">Index to remove filterOld from.</param>
    </member>
    <member name="P:Aspose.OCR.CorrectionFilters.Filters">
      <summary>
            Gets all filtersOld.
            </summary>
    </member>
    <member name="P:Aspose.OCR.CorrectionFilters.Item(System.Int32)">
      <summary>
            Gets or sets <see cref="T:Aspose.OCR.ObsoleteFilter" /> object by index.
            </summary>
      <param name="index">Index of object.</param>
      <returns>
        <see cref="T:Aspose.OCR.ObsoleteFilter" /> object</returns>
    </member>
    <member name="P:Aspose.OCR.CorrectionFilters.Count">
      <summary>
            Returns count of the filtersOld.
            </summary>
    </member>
    <member name="P:Aspose.OCR.CorrectionFilters.IsReadOnly">
      <summary>
            Returns true if collection is read-only.
            </summary>
    </member>
    <member name="T:Aspose.OCR.Filters.BlurFilter">
      <summary>
            Represent blur filtration.
            </summary>
    </member>
    <member name="M:Aspose.OCR.Filters.BlurFilter.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the BlurFilterOld class.
            </summary>
      <param name="size"> Window size. </param>
    </member>
    <member name="P:Aspose.OCR.Filters.BlurFilter.Size">
      <summary>
            Gets or sets Size of a filter.
            </summary>
    </member>
    <member name="T:Aspose.OCR.Filters.GaussBlurFilter">
      <summary>
            Represents Gauss blur filtration.
            </summary>
    </member>
    <member name="M:Aspose.OCR.Filters.GaussBlurFilter.#ctor">
      <summary>
            Initializes a new instance of the GaussBlurFilterOld class.
            </summary>
    </member>
    <member name="M:Aspose.OCR.Filters.GaussBlurFilter.#ctor(System.Int32,System.Single)">
      <summary>
            Initializes a new instance of the GaussBlurFilterOld class.
            </summary>
      <param name="size"> Window size. </param>
      <param name="sigm"> Sigma parameter. </param>
    </member>
    <member name="P:Aspose.OCR.Filters.GaussBlurFilter.Size">
      <summary>
            Gets or sets Size of a filter.
            </summary>
    </member>
    <member name="P:Aspose.OCR.Filters.GaussBlurFilter.Sigm">
      <summary>
            Gets or sets sigm parameter.
            </summary>
    </member>
    <member name="T:Aspose.OCR.Filters.MedianFilter">
      <summary>
            Represents median filtration.
            </summary>
    </member>
    <member name="M:Aspose.OCR.Filters.MedianFilter.#ctor">
      <summary>
            Initializes a new instance of the MedianFilter class.
            </summary>
    </member>
    <member name="M:Aspose.OCR.Filters.MedianFilter.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the MedianFilterOld class.
            </summary>
      <param name="size"> Window size. </param>
    </member>
    <member name="P:Aspose.OCR.Filters.MedianFilter.Size">
      <summary>
            Gets or sets Size of a filter.
            </summary>
    </member>
    <member name="T:Aspose.OCR.Filters.RemoveNoiseFilter">
      <summary>
            Represents remove noise filtration.
            </summary>
    </member>
    <member name="T:Aspose.OCR.ILanguage">
      <summary>
            This interface represents recognition language.
            Instance of this can be construct only in <see cref="T:Aspose.OCR.Language" /> factory.
            </summary>
      <example>
        <code>
            OcrEngine ocr = new OcrEngine();
            ocr.Languages.AddLanguage(Language.Load("english")); 
            ocr.Languages.AddLanguage(Language.Load("spain"));
            </code>
      </example>
    </member>
    <member name="M:Aspose.OCR.ILanguage.AddWord(System.String)">
      <summary>
            Adds the word to the dictionary.
            </summary>
      <param name="word">The word to add.</param>
    </member>
    <member name="M:Aspose.OCR.ILanguage.Save">
      <summary>
            Saves changes.
            </summary>
    </member>
    <member name="M:Aspose.OCR.ILanguage.GetClassName(System.Char)">
      <summary>
            Returns name of the class input character is refers to. For example letter "x" is small_letter
            </summary>
      <param name="ch">
            The input character.
            </param>
      <returns>
            The character class name.
            </returns>
    </member>
    <member name="M:Aspose.OCR.ILanguage.GetCharsByClass">
      <summary>
            Returns all chars ordered by theirs classes: ba dg sa ss
            </summary>
      <returns>
            All chars ordered by theirs classes: ba dg sa ss
            </returns>
    </member>
    <member name="P:Aspose.OCR.ILanguage.Language">
      <summary>
            Gets the name of language.
            </summary>
    </member>
    <member name="P:Aspose.OCR.ILanguage.Alphabet">
      <summary>
            Gets the alphabet.
            </summary>
    </member>
    <member name="T:Aspose.OCR.INotifier">
      <summary>
            This interface represents a notifier.
            Each notifier can send event (recognized word, recognized several characters).
            </summary>
    </member>
    <member name="E:Aspose.OCR.INotifier.Elapsed">
      <summary>
            Occurs when the event has raised.
            </summary>
    </member>
    <member name="P:Aspose.OCR.INotifier.Text">
      <summary>
            Gets the recognized text.
            This is only part of the recognized text is processed between the two raising of events.
            </summary>
    </member>
    <member name="T:Aspose.OCR.OCRConfig">
      <summary>
            Configuration for OCR system.
            </summary>
      <example>
        <code>
            [C#]
            OcrEngine ocr = new OcrEngine();
            ocr.Config.NeedRotationCorrection = false;
            </code>
      </example>
    </member>
    <member name="M:Aspose.OCR.OCRConfig.AddRecognitionBlock(Aspose.OCR.IRecognitionBlock)">
      <summary>
            Adds a rectangular block to user defined RecognitionBlocks
            </summary>
      <param name="recognitionBlock">a block to add</param>
    </member>
    <member name="M:Aspose.OCR.OCRConfig.ClearRecognitionBlocks">
      <summary>
            Clear recognition blocks array.
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.ProbabilityRow">
      <summary>
            Gets or sets row with probable symbols to return probable symbols from.
            Default value is 0, so only the most probable symbols return. 
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.CorrectionFilters">
      <summary>
            Gets or sets filters for correction before recognition 
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.DoSpellingCorrection">
      <summary>
             Gets or sets a value indicating whether automatic spelling correction should be applied. 
             Use this option to improve OCR result but notice that this will increase total processing time
             </summary>
      <example>
        <code>
             [C#]
             OcrEngine ocr = new OcrEngine();
             ocr.Image = ImageStream.FromFile(@"image.tiff");
            
             ocr.Languages.AddLanguage(Language.Load("english")); 
             ocr.Config.DoSpellingCorrection = true;
             using (ocr.Resource = new FileStream(resourceFileName, FileMode.Open))
             {
                 if (ocr.Process())
                 {
                     Console.WriteLine(ocr.Text);
                 }
             }
             </code>
      </example>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.DetectTextRegions">
      <summary>
            Gets or sets a value indicating whether automatical detection of the regions with text must be used. 
            If this property is set to "true", manually set recognition blocks will be ignored.
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.RemoveNonText">
      <summary>
             Set this parameter to TRUE if image contains non-text components (e.g. pictures, graphics) that should be detected and ignored during recognition process
             </summary>
      <example>
        <code>
             [C#]
             OcrEngine ocr = new OcrEngine();
             ocr.Image = ImageStream.FromFile(@"image.tiff");
            
             ocr.Languages.AddLanguage(Language.Load("english")); 
             ocr.Config.RemoveNonText = true;
             using (ocr.Resource = new FileStream(resourceFileName, FileMode.Open))
             {
                 if (ocr.Process())
                 {
                     Console.WriteLine(ocr.Text);
                 }
             }
             </code>
      </example>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.DeleteTableLines">
      <summary>
             Gets or sets a value that indicates whether need to find and delete table lines in document
             Don't use this property unnecessarily, because it may remove some meaningful information from the image and will increase total processing time
             </summary>
      <example>
        <code>
             [C#]
             OcrEngine ocr = new OcrEngine();
             ocr.Image = ImageStream.FromFile(@"image.tiff");
            
             ocr.Languages.AddLanguage(Language.Load("english")); 
             ocr.Config.DeleteTableLines = true;
             using (ocr.Resource = new FileStream(resourceFileName, FileMode.Open))
             {
                 if (ocr.Process())
                 {
                     Console.WriteLine(ocr.Text);
                 }
             }
             </code>
      </example>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.DetectReadingOrder">
      <summary>
             Gets or sets a value that indicates whether special reading order detection operation must be applied to textblocks
             Default value is TRUE
             If OCR process works too much time or is not responding, try to set this property to FALSE
             </summary>
      <example>
        <code>
             [C#]
             OcrEngine ocr = new OcrEngine();
             ocr.Image = ImageStream.FromFile(@"image.tiff");
            
             ocr.Languages.AddLanguage(Language.Load("english")); 
             ocr.Config.DetectReadingOrder = false;
             using (ocr.Resource = new FileStream(resourceFileName, FileMode.Open))
             {
                 if (ocr.Process())
                 {
                     Console.WriteLine(ocr.Text);
                 }
             }
             </code>
      </example>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.DictionaryReader">
      <summary>
            Get or set any of available dictionary readers for post processing, if not set, post processing is not turned on.
            This property (if not null) overides UseDefaultDictionaries property.
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.UseDefaultDictionaries">
      <summary>
            If DictionaryReader property is null, this property indicates whether to use default dictionaries 
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.AdjustRotation">
      <summary>
            Gets or sets a value of adjust rotation mode <see cref="T:Aspose.OCR.AdjustRotationMode" />. Possible values: 
            <see cref="F:Aspose.OCR.AdjustRotationMode.Automatic" /> - skew angle is defined automatically (this may take some time but will improve recognition quality)
            <see cref="F:Aspose.OCR.AdjustRotationMode.UserDefined" /> - image is rotated on angle defined in <see cref="P:Aspose.OCR.OCRConfig.AdjustRotationAngle" /><see cref="F:Aspose.OCR.AdjustRotationMode.Disabled" /> - no image rotation will be applied
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.AdjustRotationAngle">
      <summary>
            Gets or sets a value of clockwise rotation angle, in degrees.
            Use only when AdjustRotation is equal to AdjustRotationMode.UserDefined.
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.AdjustUpsideDownRotation">
      <summary>
            Gets or sets a value of upsidedown rotation mode <see cref="T:Aspose.OCR.AdjustUpsideDownRotationMode" />.
            Set it to <see cref="F:Aspose.OCR.AdjustUpsideDownRotationMode.Flip" /> if text on image is upsidedown so it will be rotated to 180 degrees
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.ProcessColoredBackground">
      <summary>
            Turn on this option if input image have complex colored background and standart process works bad
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.QuantizationPalleteSize">
      <summary>
            It is advanced option, which control number of colors to image pallete while quantization; this option make sence olny if ProcessColoredBackground is true; defalt value is 5
            </summary>
    </member>
    <member name="P:Aspose.OCR.OCRConfig.RecognitionBlocks">
      <summary>
            User defined blocks that determines page layout
            </summary>
    </member>
    <member name="T:Aspose.OCR.Page">
      <summary>
            Perpesents separate page with recognition results.
            </summary>
    </member>
    <member name="P:Aspose.OCR.Page.PageText">
      <summary>
            Gets recognized text for current page.
            </summary>
    </member>
    <member name="T:Aspose.OCR.AdjustRotationMode">
      <summary>
            Define adjust rotation mode.
            </summary>
    </member>
    <member name="F:Aspose.OCR.AdjustRotationMode.Automatic">
      <summary>
            Automatic detection of rotation.
            </summary>
    </member>
    <member name="F:Aspose.OCR.AdjustRotationMode.UserDefined">
      <summary>
            User defined value of rotation angle.
            Need set AdjustRotationAngle property.
            </summary>
    </member>
    <member name="F:Aspose.OCR.AdjustRotationMode.Disabled">
      <summary>
            Without rotation.
            </summary>
    </member>
    <member name="T:Aspose.OCR.AdjustUpsideDownRotationMode">
      <summary>
            Define adjust upsidedown orientation mode.
            </summary>
    </member>
    <member name="F:Aspose.OCR.AdjustUpsideDownRotationMode.Flip">
      <summary>
            Rotate picture to 180 degrees.
            </summary>
    </member>
    <member name="F:Aspose.OCR.AdjustUpsideDownRotationMode.None">
      <summary>
            Without rotation.
            </summary>
    </member>
    <member name="T:Aspose.OCR.DictionaryReaderCreator">
      <summary>
            This class is factory of IDictionaryReader for specific dictionary format. If OcrEngine.ConfigOld.DictionaryReader is set,
            OcrEngine will turn on PostProcessing based on current dictionary reader.
            </summary>
      <example>
        <code>
            [C#]
            IDictionaryReader dr = DictionaryReaderCreator.GetOpenOfficeDictionaryReader(
                    stringPath + "en_GB.dic",
                    stringPath + "en_GB.aff");
            OcrEngine ocr = new OcrEngine();
            ocr.ConfigOld.DictionaryReader = dr;
            </code>
      </example>
    </member>
    <member name="M:Aspose.OCR.DictionaryReaderCreator.GetOpenOfficeDictionaryReader(System.String,System.String)">
      <summary>
            Create OpenOfficeDictionaryReader as IDictionaryReader
            </summary>
      <param name="dicFile">It is string full path to OpenOffice (Hunspell) dictionary file (.dic)</param>
      <param name="affFile">It is string full path to OpenOffice (Hunspell) affix file (.aff)</param>
      <returns>An instance of <see cref="T:Aspose.OCR.Dictionaries.DictionaryReaders.OOReader.OpenOfficeDictionaryReader" />.</returns>
    </member>
    <member name="M:Aspose.OCR.DictionaryReaderCreator.GetOpenOfficeDictionaryReader(System.IO.MemoryStream,System.IO.MemoryStream)">
      <summary>
            Create OpenOfficeDictionaryReader as IDictionaryReader
            </summary>
      <param name="dicFileStream">It is a MemoryStream with content of OpenOffice (Hunspell) dictionary file (.dic)</param>
      <param name="affFileStream">IIt is a MemoryStream with content of OpenOffice (Hunspell) affix file (.aff)</param>
      <returns>An instance of <see cref="T:Aspose.OCR.Dictionaries.DictionaryReaders.OOReader.OpenOfficeDictionaryReader" />.</returns>
    </member>
    <member name="T:Aspose.OCR.IDictionaryReader">
      <summary>
            Interface defines the way to get word from other dictionary format
            </summary>
    </member>
    <member name="M:Aspose.OCR.IDictionaryReader.GetWords">
      <summary>
            Returns all exceptable word
            </summary>
      <returns>All exceptable word</returns>
    </member>
    <member name="T:Aspose.OCR.IImageStream">
      <summary>
            This interface is for working with images. Data format is specified in the field “Format”. Instance of this interface is required for recognition in “OCREngine”.
            Instance of this interface can be construct in <see cref="T:Aspose.OCR.ImageStream" /> factory only.
            </summary>
      <example>
        <code>
            OcrEngine ocr = new OcrEngine();
            ocr.Image = ImageStream.FromFile(@"image.tiff");
            ocr.Image = ImageStream.FromMemoryStream(memoryStream, imageStreamFormat);
            </code>
      </example>
    </member>
    <member name="P:Aspose.OCR.IImageStream.Data">
      <summary>
            Gets image data.
            This image data stored in various formats. The format is specified in field “Format”.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IImageStream.Format">
      <summary>
            Gets the format of data in which the image is stored in the field <see cref="P:Aspose.OCR.IImageStream.Data">Data</see>.
            </summary>
    </member>
    <member name="T:Aspose.OCR.BuildVersionInfo">
      <summary>
            Represents common information about build.
            </summary>
    </member>
    <member name="F:Aspose.OCR.BuildVersionInfo.AssemblyVersion">
      <summary>
            Version of assembly.
            </summary>
    </member>
    <member name="F:Aspose.OCR.BuildVersionInfo.FileVersion">
      <summary>
            Version of file.
            </summary>
    </member>
    <member name="F:Aspose.OCR.BuildVersionInfo.Product">
      <summary>
            Product name.
            </summary>
    </member>
    <member name="F:Aspose.OCR.BuildVersionInfo.ProductMajor">
      <summary>
            Product major version.
            </summary>
    </member>
    <member name="F:Aspose.OCR.BuildVersionInfo.ProductMinor">
      <summary>
            Product minor version.
            </summary>
    </member>
    <member name="F:Aspose.OCR.BuildVersionInfo.ReleaseDate">
      <summary>
            Date of release.
            </summary>
    </member>
    <member name="T:Aspose.OCR.ImageStream">
      <summary>
            This factory creates objects of “IImageStream” type. This has a set of static methods for creating objects from different input data.
            </summary>
      <example>
        <code>
            OcrEngine ocr = new OcrEngine();
            ocr.Image = ImageStream.FromFile(@"image.tiff");
            ocr.Image = ImageStream.FromMemoryStream(memoryStream, imageStreamFormat);
            </code>
      </example>
    </member>
    <member name="M:Aspose.OCR.ImageStream.FromMemoryStream(System.IO.MemoryStream,Aspose.OCR.ImageStreamFormat)">
      <summary>
            Creates instance of “IImageStream” object  from MemoryStream, parameter "format" sets a data type.
            </summary>
      <param name="memoryStream">The <see cref="T:System.IO.MemoryStream" /> object with image data.</param>
      <param name="type">The <see cref="T:Aspose.OCR.ImageStreamFormat" /> object sets image format in memoryStreameam parameter.</param>
      <returns>The instance of <see cref="T:Aspose.OCR.IImageStream" />.</returns>
    </member>
    <member name="M:Aspose.OCR.ImageStream.FromFile(System.String)">
      <summary>
            Creates instance of “IImageStream” from the specified file.
            This will raise exception if the file not exists or the file formats is not supported.
            </summary>
      <param name="imageFile">A string that contains the name of the file from which to create the <see cref="T:Aspose.OCR.IImageStream" />.</param>
      <returns>The <see cref="T:Aspose.OCR.IImageStream" /> object.</returns>
      <exception cref="T:Aspose.OCR.OcrException">Thrown when file not exists or format not supported.</exception>
    </member>
    <member name="T:Aspose.OCR.ImageStreamFormat">
      <summary>
            Enumerable of data formats of images.
            </summary>
    </member>
    <member name="F:Aspose.OCR.ImageStreamFormat.Tiff">
      <summary>
            Specifies that the image format is TIFF.
            </summary>
    </member>
    <member name="F:Aspose.OCR.ImageStreamFormat.Bmp">
      <summary>
            Specifies that the image format is BMP.
            </summary>
    </member>
    <member name="F:Aspose.OCR.ImageStreamFormat.Png">
      <summary>
            Specifies that the image format is PNG.
            </summary>
    </member>
    <member name="F:Aspose.OCR.ImageStreamFormat.Jpg">
      <summary>
            Specifies that the image format is JPG.
            </summary>
    </member>
    <member name="F:Aspose.OCR.ImageStreamFormat.Gif">
      <summary>
            Specifies that the image format is GIF.
            </summary>
    </member>
    <member name="T:Aspose.OCR.IRecognizedText">
      <summary>
            This interface is for work with recognized text.
            The result may be in multiple formats (plain text, array parts with details on each, in the hOCR format).
            </summary>
      <example>
        <code>
            OcrEngine ocr = new OcrEngine();
            ocr.Languages.AddLanguage(Language.Load("english"));
            ocr.Image = ImageStream.FromFile(@"image.tiff");
            if (ocr.Process())
            {
            }
            
            foreach (IRecognizedBlockInfo recognizedBlockInfo in ocr.Text.BlocksInfo)
            {
                string text = recognizedBlockInfo.Text;
                if (recognizedBlockInfo.Bold)
                    text = String.Format("<b>{0}</b>", text);
                if (recognizedBlockInfo.Italic)
                    text = String.Format("<i>{0}</i>", text);
                Console.WriteLine(text);
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.OCR.IRecognizedText.ToString">
      <summary>
            Gets whole recognized text without formatting. It is concatenation texts from parts.
            </summary>
      <returns>Whole recognized text without formatting</returns>
    </member>
    <member name="P:Aspose.OCR.IRecognizedText.PartsInfo">
      <summary>
            Gets an array of recognized text by parts.
            <para>
            Each part has its own style, font, text size, color, language and more.
            If the text consists of several parts that are written by different font (or a different language, etc.), then according to each will have an element in this array.
            It is divided by the words into parts, if have large text that has the same style.
            Parts are consistently followed, that they found in the original text so they are following here.
            </para></summary>
    </member>
    <member name="T:Aspose.OCR.IRecognizedPartInfo">
      <summary>
            Interface that presents information about part of the recognized text.
            Could be text or detected picture block
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedPartInfo.Box">
      <summary>
            Gets the rectangular area where the detected block (with text or picture) is shown on the image.
            Coordinates starts with the upper left corner of the image.
            </summary>
    </member>
    <member name="T:Aspose.OCR.IRecognizedTextPartInfo">
      <summary>
            This interface presents information about each part of the recognized text.
            <para>
            Part of text seems one part, that has all the same characteristics (style, color, etc.). It is divided by the words into parts, if have large text that has the same style.
            </para></summary>
      <example>
        <code>
            [C#]
            foreach (IRecognizedBlockInfo recognizedBlockInfo in ocr.Text.BlocksInfo)
            {
                string text = recognizedBlockInfo.Text;
                if (recognizedBlockInfo.Bold)
                    text = String.Format("<b>{0}</b>", text);
                if (recognizedBlockInfo.Italic)
                    text = String.Format("<i>{0}</i>", text);
                Console.WriteLine(text);
            }
            </code>
      </example>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.Text">
      <summary>
            Gets the text of this part.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.Font">
      <summary>
            Gets the font of this part.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.FontSize">
      <summary>
            Gets the font size of this part.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.Bold">
      <summary>
            Gets the value that indicates whether this part is bold.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.Italic">
      <summary>
            Gets a value that indicates whether this part is italic.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.Underline">
      <summary>
            Gets a value that indicates whether this part is underline.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.TextColor">
      <summary>
            Gets a color of text this part.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.BackgroundColor">
      <summary>
            Gets the color of background this part.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.CharactersQuality">
      <summary>
            Gets an array of values specified for some recognition of this character. Size of the array is equal to size of <see cref="P:Aspose.OCR.IRecognizedTextPartInfo.Text">Text</see> (how many letters in part).
            Each array element can be from 0.0 to 1.0 inclusive. Value 0.0 means that the poorly recognized, 1.0 means that perfectly recognized.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.CharactersBox">
      <summary>
            Gets an array of rectangles. Size of the array is equal to size of <see cref="P:Aspose.OCR.IRecognizedTextPartInfo.Text">Text</see> (how many letters in part).
            Each rectangle indicates the area of character.
            Coordinates starts with the upper left corner of the picture.
            </summary>
    </member>
    <member name="P:Aspose.OCR.IRecognizedTextPartInfo.Language">
      <summary>
            Gets the language of this part.
            </summary>
      <seealso cref="T:Aspose.OCR.ILanguage" />
    </member>
    <member name="T:Aspose.OCR.Language">
      <summary>
            This is factory for creating objects of type <see cref="T:Aspose.OCR.ILanguage" />.
            It has a static method for creating objects.
            </summary>
      <example>
        <code>
            ILanguage english = Language.Load("english");
            ILanguage spanish = Language.Load("spanish");
            ILanguage french = Language.Load("french");
            </code>
      </example>
    </member>
    <member name="M:Aspose.OCR.Language.Load(System.String)">
      <summary>
            Creates instance of <see cref="T:Aspose.OCR.ILanguage" /> from name of language.
            This will raise exception if files for that language not exists in specified directory.
            </summary>
      <param name="languageName">The name of language.</param>
      <returns>The instance of <see cref="T:Aspose.OCR.ILanguage" />.</returns>
      <exception cref="T:System.ArgumentException">Thrown when have not "languageName" language.</exception>
    </member>
    <member name="T:Aspose.OCR.LanguageContainer">
      <summary>
            This is container for recognition languages. It needs to set a set of recognition languages.
            <para>
            Recognition of multiple languages.
            The text is recognized by words. Each recognized word has a specific language.
            There is priority of recognition languages. Language that was added earlier to the collection has a higher priority. If the word is identical in several languages, a language that was earlier added to the collection will be selected.
            </para></summary>
      <example>
        <code>
            OcrEngine ocr = new OcrEngine();
            ocr.Languages.AddLanguage(Language.Load("english")); 
            ocr.Languages.AddLanguage(Language.Load("spain"));
            ILanguage language = ocr.Languages.GetLanguage("spain");
            </code>
      </example>
    </member>
    <member name="M:Aspose.OCR.LanguageContainer.AddLanguage(Aspose.OCR.ILanguage)">
      <summary>
            Adds to the collection recognition language. If such language is already in the collection, it added again.
            </summary>
      <param name="language">The <see cref="T:Aspose.OCR.ILanguage" /> object to add.</param>
    </member>
    <member name="M:Aspose.OCR.LanguageContainer.GetLanguage(System.String)">
      <summary>
            Gets the language from the collection.
            </summary>
      <param name="language">Name of language.</param>
      <returns>The <see cref="T:Aspose.OCR.ILanguage" /> object.</returns>
      <exception cref="T:Aspose.OCR.OcrException">The specified language does not exist.</exception>
    </member>
    <member name="M:Aspose.OCR.LanguageContainer.GetEnumerator">
      <summary>
            Gets enumerator that can be used to loop through the collection.
            </summary>
      <returns>Enumerator object.</returns>
    </member>
    <member name="P:Aspose.OCR.LanguageContainer.Count">
      <summary>
            Gets total count of languages in container.
            </summary>
    </member>
    <member name="P:Aspose.OCR.LanguageContainer.Item(System.Int32)">
      <summary>
            Gets or sets language by index.
            </summary>
      <param name="index">Index of language.</param>
      <returns>
        <see cref="T:Aspose.OCR.ILanguage" /> instance.</returns>
    </member>
    <member name="T:Aspose.OCR.Notifier">
      <summary>
            This is factory for create objects of type "INotifier".
            It has a set of static methods for creating objects from different input data.
            </summary>
    </member>
    <member name="M:Aspose.OCR.Notifier.Word">
      <summary>
            Creates the notifier that causes an event when a recognized word.
            </summary>
      <returns>The notifier.</returns>
    </member>
    <member name="M:Aspose.OCR.Notifier.Symbol">
      <summary>
            Creates the notifier that causes an event when a recognized each symbol.
            </summary>
      <returns>The notifier.</returns>
    </member>
    <member name="M:Aspose.OCR.Notifier.Block(System.Int32)">
      <summary>
            Creates the notifier that causes an event when a recognized "bloackSize" characters.
            </summary>
      <param name="blockSize">Size of the block.</param>
      <returns>The notifier.</returns>
      <exception cref="T:System.ArgumentException">Thrown when blockSize less or equal zero.</exception>
    </member>
    <member name="M:Aspose.OCR.Notifier.Page">
      <summary>
            Creates the notifier that causes an event when a recognized page of a multipage document.
            </summary>
      <returns>The notifier.</returns>
    </member>
    <member name="T:Aspose.OCR.NotifierHandler">
      <summary>
            Delegate for Elapsed event.
            </summary>
      <param name="sender">Object to send event.</param>
      <param name="recognizedText">Recognized part.</param>
    </member>
    <member name="T:Aspose.OCR.OcrAlgorithmMode">
      <summary>
            Modes of the OCR algorithm using by engine
            </summary>
    </member>
    <member name="F:Aspose.OCR.OcrAlgorithmMode.None">
      <summary>
            No algorithm defined.
            </summary>
    </member>
    <member name="F:Aspose.OCR.OcrAlgorithmMode.M32PtFontStyles12NEts">
      <summary>
            32 Font Size 12 networks
            </summary>
    </member>
    <member name="F:Aspose.OCR.OcrAlgorithmMode.M16PtFontStyles12NEts">
      <summary>
            16 Font Styles 12 networks
            </summary>
    </member>
    <member name="F:Aspose.OCR.OcrAlgorithmMode.M8PtFontStyles12NEts">
      <summary>
            8 Font Style 12 networks
            </summary>
    </member>
    <member name="T:Aspose.OCR.OcrEngine">
      <summary>
            Main Aspose.OCR class.
            Users will use instance of this class most of the time.
            </summary>
      <example>
        <code>
            [C#]
            OcrEngine ocr = new OcrEngine();
            ocr.Image = ImageStream.FromFile(@"image.tiff");
            ocr.Languages.AddLanguage(Language.Load("english"));
            using(ocr.Resource = new FileStream(resourceFileName, FileMode.Open))
            {
                if (ocr.Process())
                {
                    Console.WriteLine(ocr.Text);
                }
            }
            </code>
      </example>
    </member>
    <member name="M:Aspose.OCR.OcrEngine.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.OCR.OcrEngine" /> class.
            </summary>
    </member>
    <member name="M:Aspose.OCR.OcrEngine.Process">
      <summary>
            Runs the recognition process.
            <para>
            OcrEngine must be configured before running this method, otherwise Exception will be thrown. Once this method is called, you may get recognized text from Text property.
            Before calling the method, add at least one language to Languages and set image. 
            </para></summary>
      <returns>A value indicating whether text has been recognized succesfully.</returns>
      <exception cref="T:Aspose.OCR.OcrException">Thrown if it instance is not configured.</exception>
    </member>
    <member name="M:Aspose.OCR.OcrEngine.AddNotifier(Aspose.OCR.INotifier)">
      <summary>
            Adds notifier.
            <para>
            Each notifier can send event (recognized word, recognized several characters). You can add many notifiers.
            </para></summary>
      <example>
        <code>
            [C#]
            OcrEngine ocr = new OcrEngine();
            ocr.Image = ImageStream.FromFile(@"image.tiff");
            ocr.Languages.AddLanguage(Language.Load("english"));
            
            INotifier wordNotifier = Notifier.Word();
            wordNotifier.Elapsed += delegate
            {
                Console.WriteLine("1!" + wordNotifier.Text);
            };
            INotifier blockNotifier = Notifier.Block(1024);
            blockNotifier.Elapsed += delegate
            {
                Console.WriteLine("2!" + blockNotifier.Text);
            };
            ocr.AddNotifier(wordNotifier);
            ocr.AddNotifier(blockNotifier);
            using(ocr.Resource = new FileStream(resourceFileName, FileMode.Open))
            {
                if (ocr.Process())
                {
                    Console.WriteLine(ocr.Text);
                }
            }
            </code>
      </example>
      <param name="processor">The processor to add.</param>
    </member>
    <member name="M:Aspose.OCR.OcrEngine.ClearNotifies">
      <summary>
            Clear notifiers list.
            </summary>
    </member>
    <member name="P:Aspose.OCR.OcrEngine.Config">
      <summary>
            Gets or sets configuration.
            </summary>
      <exception cref="T:System.ArgumentNullException">Thrown when value is null.</exception>
      <example>
        <code>
            [C#]
            OcrEngine ocr = new OcrEngine();
            ocr.Config.NeedRotationCorrection = false;
            </code>
      </example>
    </member>
    <member name="P:Aspose.OCR.OcrEngine.Image">
      <summary>
            Sets the picture to recognize the text from.
            This property must be set before recognition or specified as one of arguments during “Process” call.
            </summary>
    </member>
    <member name="P:Aspose.OCR.OcrEngine.ProcessAllPages">
      <summary>
            Gets or sets a value indicating whether all frames in image must be processed.
            </summary>
    </member>
    <member name="P:Aspose.OCR.OcrEngine.Pages">
      <summary>
            Gets recognized text divided to pages.
            This property is only available after recognition is complete, otherwise exception will be raised.
            </summary>
      <exception cref="T:Aspose.OCR.OcrException">Thrown when use before recognition.</exception>
    </member>
    <member name="P:Aspose.OCR.OcrEngine.Text">
      <summary>
            Gets recognized text.
            This property is only available after recognition is complete, otherwise exception will be raised.
            </summary>
      <exception cref="T:Aspose.OCR.OcrException">Thrown when use before recognition.</exception>
    </member>
    <member name="P:Aspose.OCR.OcrEngine.Resource">
      <summary>
             Sets the resouce stream.
             This property must be set before recognition or specified as one of arguments during “Process” call.
             </summary>
      <example>
        <code>
             [C#]
             OcrEngine ocr = new OcrEngine();
             ocr.Image = ImageStream.FromFile(@"image.tiff");
            
             ocr.Languages.AddLanguage(Language.Load("english")); 
             using (ocr.Resource = new FileStream(resourceFileName, FileMode.Open))
             {
                 if (ocr.Process())
                 {
                     Console.WriteLine(ocr.Text);
                 }
             }
             </code>
      </example>
    </member>
    <member name="P:Aspose.OCR.OcrEngine.Languages">
      <summary>
             Gets container recognition languages.
             Enables user to define a list of languages to use for recognition. You may add several languages here.
             This property must be set before recognition or specified as one of arguments during “Process” call.
             <para>
             Recognition of multiple languages.
             The text is recognized by words. Each recognized word has a specific language.
             There is priority of recognition languages. Language that was added earlier to the collection has a higher priority. If the word is identical in several languages, a language that was earlier added to the collection will be selected.
             </para></summary>
      <example>
        <code>
             [C#]
             OcrEngine ocr = new OcrEngine();
             ocr.Image = ImageStream.FromFile(@"image.tiff");
            
             ocr.Languages.AddLanguage(Language.Load("english")); 
             ocr.Languages.AddLanguage(Language.Load("spain"));
             using(ocr.Resource = new FileStream(resourceFileName, FileMode.Open))
             {
                 if (ocr.Process())
                 {
                     Console.WriteLine(ocr.Text);
                 }
             }
             </code>
      </example>
    </member>
    <member name="T:Aspose.OCR.OcrException">
      <summary>
            This exception indicates an exception while working with OCR module.
            </summary>
    </member>
    <member name="M:Aspose.OCR.OcrException.#ctor(System.String,System.Exception)">
      <summary>
            Create this exception with the given message and underlying cause.
            </summary>
      <param name="message">The message of this exception.</param>
      <param name="cause">The underlying exception.</param>
    </member>
    <member name="M:Aspose.OCR.OcrException.#ctor(System.String)">
      <summary>
            Create this exception with the given message.
            </summary>
      <param name="message">The message of this exception.</param>
    </member>
    <member name="T:Aspose.OCR.RecognitionBlock">
      <summary>
            This factory creates objects of type <see cref="T:Aspose.OCR.IRecognitionBlock" />. This has a set of static methods for creating objects from different input data.
            </summary>
      <example>
        <code>
            IRecognitionBlock textBlock = RecognitionBlock.CreateTextBlock(0, 0, 100, 200);
            IRecognitionBlock pictureBlock = RecognitionBlock.CreatePictureBlock(0, 0, 100, 200);
            </code>
      </example>
    </member>
    <member name="M:Aspose.OCR.RecognitionBlock.CreateTextBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a block for text recognition in rectangular area.
            </summary>
      <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <returns>The instance of <see cref="T:Aspose.OCR.IRecognitionBlock" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> is less than 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> is less than 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> is less than or equal to 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="height" /> is less than or equal to 0</exception>
    </member>
    <member name="M:Aspose.OCR.RecognitionBlock.CreatePictureBlock(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a picture block for rectangular area. This block will not recognize.
            </summary>
      <param name="x">The x-coordinate of the upper-left corner of the rectangle.</param>
      <param name="y">The y-coordinate of the upper-left corner of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <returns>The instance of <see cref="T:Aspose.OCR.IRecognitionBlock" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> is less than 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="y" /> is less than 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> is less than or equal to 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="height" /> is less than or equal to 0</exception>
    </member>
  </members>
</doc>